
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "basics_tabular/example_tabular_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_basics_tabular_example_tabular_regression.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_basics_tabular_example_tabular_regression.py:


======================
Tabular Regression
======================

The following example shows how to fit a sample regression model
with AutoPyTorch

.. GENERATED FROM PYTHON SOURCE LINES 9-86




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <smac.runhistory.runhistory.RunHistory object at 0x7f4c5204e4f0> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.0020339488983154297, budget=0), TrajEntry(train_perf=1.0, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=1, ta_time_used=3.6462996006011963, wallclock_time=6.505040407180786, budget=5.555555555555555), TrajEntry(train_perf=1.0, incumbent_id=2, incumbent=Configuration:
      data_loader:batch_size, Value: 33
      encoder:__choice__, Value: 'NoEncoder'
      imputer:categorical_strategy, Value: 'constant_!missing!'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:CosineAnnealingLR:T_max, Value: 105
      lr_scheduler:__choice__, Value: 'CosineAnnealingLR'
      network_backbone:ShapedResNetBackbone:activation, Value: 'sigmoid'
      network_backbone:ShapedResNetBackbone:blocks_per_group, Value: 1
      network_backbone:ShapedResNetBackbone:max_shake_drop_probability, Value: 0.1895429402888693
      network_backbone:ShapedResNetBackbone:max_units, Value: 13
      network_backbone:ShapedResNetBackbone:mb_choice, Value: 'shake-drop'
      network_backbone:ShapedResNetBackbone:num_groups, Value: 13
      network_backbone:ShapedResNetBackbone:output_dim, Value: 51
      network_backbone:ShapedResNetBackbone:resnet_shape, Value: 'stairs'
      network_backbone:ShapedResNetBackbone:use_batch_norm, Value: True
      network_backbone:ShapedResNetBackbone:use_dropout, Value: False
      network_backbone:ShapedResNetBackbone:use_skip_connection, Value: True
      network_backbone:__choice__, Value: 'ShapedResNetBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'tanh'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 347
      network_init:SparseInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'SparseInit'
      optimizer:AdamOptimizer:beta1, Value: 0.862448710678493
      optimizer:AdamOptimizer:beta2, Value: 0.9337887040327193
      optimizer:AdamOptimizer:lr, Value: 0.0011626744102331017
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 5.257967646172465e-05
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'MinMaxScaler'
      trainer:MixUpTrainer:alpha, Value: 0.14364788280874574
      trainer:MixUpTrainer:se_lastk, Constant: 3
      trainer:MixUpTrainer:use_lookahead_optimizer, Value: False
      trainer:MixUpTrainer:use_snapshot_ensemble, Value: True
      trainer:MixUpTrainer:use_stochastic_weight_averaging, Value: True
      trainer:__choice__, Value: 'MixUpTrainer'
    , ta_runs=10, ta_time_used=40.214481830596924, wallclock_time=61.165581703186035, budget=16.666666666666664), TrajEntry(train_perf=1.0, incumbent_id=3, incumbent=Configuration:
      data_loader:batch_size, Value: 158
      encoder:__choice__, Value: 'OneHotEncoder'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'most_frequent'
      lr_scheduler:CyclicLR:base_lr, Value: 0.046896288894679325
      lr_scheduler:CyclicLR:max_lr, Value: 0.05037999395029099
      lr_scheduler:CyclicLR:mode, Value: 'exp_range'
      lr_scheduler:CyclicLR:step_size_up, Value: 3288
      lr_scheduler:__choice__, Value: 'CyclicLR'
      network_backbone:ShapedResNetBackbone:activation, Value: 'relu'
      network_backbone:ShapedResNetBackbone:blocks_per_group, Value: 3
      network_backbone:ShapedResNetBackbone:max_dropout, Value: 0.12686299185507846
      network_backbone:ShapedResNetBackbone:max_units, Value: 418
      network_backbone:ShapedResNetBackbone:mb_choice, Value: 'shake-shake'
      network_backbone:ShapedResNetBackbone:num_groups, Value: 8
      network_backbone:ShapedResNetBackbone:output_dim, Value: 20
      network_backbone:ShapedResNetBackbone:resnet_shape, Value: 'stairs'
      network_backbone:ShapedResNetBackbone:use_batch_norm, Value: True
      network_backbone:ShapedResNetBackbone:use_dropout, Value: True
      network_backbone:ShapedResNetBackbone:use_skip_connection, Value: True
      network_backbone:__choice__, Value: 'ShapedResNetBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 4
      network_head:fully_connected:units_layer_1, Value: 470
      network_head:fully_connected:units_layer_2, Value: 94
      network_head:fully_connected:units_layer_3, Value: 164
      network_init:SparseInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'SparseInit'
      optimizer:SGDOptimizer:lr, Value: 0.0002470410450546998
      optimizer:SGDOptimizer:momentum, Value: 0.6267890515395164
      optimizer:SGDOptimizer:use_weight_decay, Value: False
      optimizer:__choice__, Value: 'SGDOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:RowCutOutTrainer:cutout_prob, Value: 0.029629952157290473
      trainer:RowCutOutTrainer:patch_ratio, Value: 0.28245343615354834
      trainer:RowCutOutTrainer:use_lookahead_optimizer, Value: False
      trainer:RowCutOutTrainer:use_snapshot_ensemble, Value: False
      trainer:RowCutOutTrainer:use_stochastic_weight_averaging, Value: False
      trainer:__choice__, Value: 'RowCutOutTrainer'
    , ta_runs=13, ta_time_used=51.03989124298096, wallclock_time=90.45402932167053, budget=50.0)]
    {'r2': -1.011142526203646}
    |    | Preprocessing   | Estimator   |   Weight |
    |---:|:----------------|:------------|---------:|
    |  0 | None            | Dummy       |        1 |






|

.. code-block:: default

    import os
    import tempfile as tmp
    import warnings

    import sklearn.datasets
    import sklearn.model_selection

    os.environ['JOBLIB_TEMP_FOLDER'] = tmp.gettempdir()
    os.environ['OMP_NUM_THREADS'] = '1'
    os.environ['OPENBLAS_NUM_THREADS'] = '1'
    os.environ['MKL_NUM_THREADS'] = '1'

    warnings.simplefilter(action='ignore', category=UserWarning)
    warnings.simplefilter(action='ignore', category=FutureWarning)

    from autoPyTorch.api.tabular_regression import TabularRegressionTask


    if __name__ == '__main__':

        ############################################################################
        # Data Loading
        # ============
        X, y = sklearn.datasets.fetch_openml(name='boston', return_X_y=True, as_frame=True)
        X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
            X,
            y,
            random_state=1,
        )

        # Scale the regression targets to have zero mean and unit variance.
        # This is important for Neural Networks since predicting large target values would require very large weights.
        # One can later rescale the network predictions like this: y_pred = y_pred_scaled * y_train_std + y_train_mean
        y_train_mean = y_train.mean()
        y_train_std = y_train.std()

        y_train_scaled = (y_train - y_train_mean) / y_train_std
        y_test_scaled = (y_test - y_train_mean) / y_train_std

        ############################################################################
        # Build and fit a regressor
        # ==========================
        api = TabularRegressionTask(
            temporary_directory='./tmp/autoPyTorch_example_tmp_02',
            output_directory='./tmp/autoPyTorch_example_out_02',
            # To maintain logs of the run, set the next two as False
            delete_tmp_folder_after_terminate=True,
            delete_output_folder_after_terminate=True
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train,
            y_train=y_train_scaled,
            X_test=X_test.copy(),
            y_test=y_test_scaled.copy(),
            optimize_metric='r2',
            total_walltime_limit=300,
            func_eval_time_limit_secs=50,
            enable_traditional_pipeline=False,
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred_scaled = api.predict(X_test)

        # Rescale the Neural Network predictions into the original target range
        y_pred = y_pred_scaled * y_train_std + y_train_mean
        score = api.score(y_pred, y_test)

        print(score)
        # Print the final ensemble built by AutoPyTorch
        print(api.show_models())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  11.980 seconds)


.. _sphx_glr_download_basics_tabular_example_tabular_regression.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/Auto-PyTorch/refactor_development?urlpath=lab/tree/notebooks/basics_tabular/example_tabular_regression.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_tabular_regression.py <example_tabular_regression.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_tabular_regression.ipynb <example_tabular_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

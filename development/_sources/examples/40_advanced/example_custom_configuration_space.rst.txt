
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_custom_configuration_space.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_custom_configuration_space.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_custom_configuration_space.py:


======================
Tabular Classification with Custom Configuration Space
======================

The following example shows how adjust the configuration space of
the search. Currently, there are two changes that can be made to the space:-
1. Adjust individual hyperparameters in the pipeline
2. Include or exclude components:
    a) include: Dictionary containing components to include. Key is the node
                name and Value is an Iterable of the names of the components
                to include. Only these components will be present in the
                search space.
    b) exclude: Dictionary containing components to exclude. Key is the node
                name and Value is an Iterable of the names of the components
                to exclude. All except these components will be present in
                the search space.

.. GENERATED FROM PYTHON SOURCE LINES 19-133




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <smac.runhistory.runhistory.RunHistory object at 0x7efe5dd23910> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 32
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:MLPBackbone:activation, Value: 'relu'
      network_backbone:MLPBackbone:num_groups, Value: 5
      network_backbone:MLPBackbone:num_units_1, Value: 200
      network_backbone:MLPBackbone:num_units_2, Value: 200
      network_backbone:MLPBackbone:num_units_3, Value: 200
      network_backbone:MLPBackbone:num_units_4, Value: 200
      network_backbone:MLPBackbone:num_units_5, Value: 200
      network_backbone:MLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'MLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:weight_decay, Value: 0.0
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.001539468765258789, budget=0), TrajEntry(train_perf=0.16374269005847952, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 32
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:MLPBackbone:activation, Value: 'relu'
      network_backbone:MLPBackbone:num_groups, Value: 5
      network_backbone:MLPBackbone:num_units_1, Value: 200
      network_backbone:MLPBackbone:num_units_2, Value: 200
      network_backbone:MLPBackbone:num_units_3, Value: 200
      network_backbone:MLPBackbone:num_units_4, Value: 200
      network_backbone:MLPBackbone:num_units_5, Value: 200
      network_backbone:MLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'MLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:weight_decay, Value: 0.0
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=1, ta_time_used=5.083964586257935, wallclock_time=6.599992752075195, budget=5.555555555555555), TrajEntry(train_perf=0.1578947368421053, incumbent_id=2, incumbent=Configuration:
      data_loader:batch_size, Value: 475
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'constant_zero'
      lr_scheduler:__choice__, Value: 'NoScheduler'
      network_backbone:MLPBackbone:activation, Value: 'tanh'
      network_backbone:MLPBackbone:dropout_1, Value: 0.579891279191762
      network_backbone:MLPBackbone:dropout_2, Value: 0.43202885747368863
      network_backbone:MLPBackbone:dropout_3, Value: 0.2053050533304992
      network_backbone:MLPBackbone:dropout_4, Value: 0.3628626567848122
      network_backbone:MLPBackbone:dropout_5, Value: 0.000687232634536894
      network_backbone:MLPBackbone:dropout_6, Value: 0.30779918180581656
      network_backbone:MLPBackbone:dropout_7, Value: 0.4566654226669556
      network_backbone:MLPBackbone:num_groups, Value: 7
      network_backbone:MLPBackbone:num_units_1, Value: 749
      network_backbone:MLPBackbone:num_units_2, Value: 751
      network_backbone:MLPBackbone:num_units_3, Value: 759
      network_backbone:MLPBackbone:num_units_4, Value: 664
      network_backbone:MLPBackbone:num_units_5, Value: 219
      network_backbone:MLPBackbone:num_units_6, Value: 757
      network_backbone:MLPBackbone:num_units_7, Value: 1005
      network_backbone:MLPBackbone:use_dropout, Value: True
      network_backbone:__choice__, Value: 'MLPBackbone'
      network_embedding:LearnedEntityEmbedding:dimension_reduction_0, Value: 0.9640640623783606
      network_embedding:LearnedEntityEmbedding:dimension_reduction_1, Value: 0.017233504391813814
      network_embedding:LearnedEntityEmbedding:dimension_reduction_2, Value: 0.24122690885917664
      network_embedding:LearnedEntityEmbedding:dimension_reduction_3, Value: 0.31247176333246596
      network_embedding:LearnedEntityEmbedding:dimension_reduction_4, Value: 0.41504826813841933
      network_embedding:LearnedEntityEmbedding:dimension_reduction_5, Value: 0.8395119637200936
      network_embedding:LearnedEntityEmbedding:dimension_reduction_6, Value: 0.8208414027523236
      network_embedding:LearnedEntityEmbedding:dimension_reduction_7, Value: 0.4284420622613293
      network_embedding:LearnedEntityEmbedding:min_unique_values_for_embedding, Value: 7
      network_embedding:__choice__, Value: 'LearnedEntityEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:num_layers, Value: 1
      network_init:KaimingInit:bias_strategy, Value: 'Zero'
      network_init:__choice__, Value: 'KaimingInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9770847327434384
      optimizer:AdamOptimizer:beta2, Value: 0.9710627513919582
      optimizer:AdamOptimizer:lr, Value: 0.00010844892447274338
      optimizer:AdamOptimizer:weight_decay, Value: 0.05048412416506887
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:Normalizer:norm, Value: 'max'
      scaler:__choice__, Value: 'Normalizer'
      trainer:StandardTrainer:weighted_loss, Value: False
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=12, ta_time_used=144.61285161972046, wallclock_time=170.217591047287, budget=16.666666666666664)]
    {'accuracy': 0.8554913294797688}
    |    | Preprocessing                                                     | Estimator                                                 |   Weight |
    |---:|:------------------------------------------------------------------|:----------------------------------------------------------|---------:|
    |  0 | None                                                              | SVC                                                       |     0.18 |
    |  1 | None                                                              | RFClassifier                                              |     0.16 |
    |  2 | None                                                              | CatBoostClassifier                                        |     0.14 |
    |  3 | SimpleImputer,OneHotEncoder,Normalizer,KernelPCA                  | embedding,ResNetBackbone,FullyConnectedHead,nn.Sequential |     0.12 |
    |  4 | SimpleImputer,OneHotEncoder,Normalizer,KernelPCA                  | embedding,ResNetBackbone,FullyConnectedHead,nn.Sequential |     0.1  |
    |  5 | SimpleImputer,OneHotEncoder,Normalizer,NoFeaturePreprocessing     | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential    |     0.1  |
    |  6 | None                                                              | ExtraTreesClassifier                                      |     0.08 |
    |  7 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,MLPBackbone,FullyConnectedHead,nn.Sequential |     0.04 |
    |  8 | SimpleImputer,OneHotEncoder,Normalizer,NoFeaturePreprocessing     | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential    |     0.02 |
    |  9 | SimpleImputer,OneHotEncoder,Normalizer,NoFeaturePreprocessing     | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential    |     0.02 |
    | 10 | None                                                              | KNNClassifier                                             |     0.02 |
    | 11 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,MLPBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    <smac.runhistory.runhistory.RunHistory object at 0x7efe4625d1f0> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 32
      encoder:__choice__, Value: 'NoEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:weight_decay, Value: 0.0
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.0013387203216552734, budget=0), TrajEntry(train_perf=0.16374269005847952, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 32
      encoder:__choice__, Value: 'NoEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:weight_decay, Value: 0.0
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=1, ta_time_used=4.217958927154541, wallclock_time=5.632348537445068, budget=5.555555555555555)]
    {'accuracy': 0.861271676300578}
    |    | Preprocessing                                                 | Estimator                                                          |   Weight |
    |---:|:--------------------------------------------------------------|:-------------------------------------------------------------------|---------:|
    |  0 | None                                                          | CatBoostClassifier                                                 |     0.72 |
    |  1 | None                                                          | SVC                                                                |     0.08 |
    |  2 | None                                                          | ExtraTreesClassifier                                               |     0.06 |
    |  3 | None                                                          | KNNClassifier                                                      |     0.06 |
    |  4 | None                                                          | RFClassifier                                                       |     0.04 |
    |  5 | SimpleImputer,NoEncoder,MinMaxScaler,KitchenSink              | no embedding,ShapedResNetBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    |  6 | SimpleImputer,NoEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential    |     0.02 |






|

.. code-block:: default

    import os
    import tempfile as tmp
    import warnings

    os.environ['JOBLIB_TEMP_FOLDER'] = tmp.gettempdir()
    os.environ['OMP_NUM_THREADS'] = '1'
    os.environ['OPENBLAS_NUM_THREADS'] = '1'
    os.environ['MKL_NUM_THREADS'] = '1'

    warnings.simplefilter(action='ignore', category=UserWarning)
    warnings.simplefilter(action='ignore', category=FutureWarning)

    import sklearn.datasets
    import sklearn.model_selection

    from autoPyTorch.api.tabular_classification import TabularClassificationTask
    from autoPyTorch.utils.hyperparameter_search_space_update import HyperparameterSearchSpaceUpdates


    def get_search_space_updates():
        """
        Search space updates to the task can be added using HyperparameterSearchSpaceUpdates
        Returns:
            HyperparameterSearchSpaceUpdates
        """
        updates = HyperparameterSearchSpaceUpdates()
        updates.append(node_name="data_loader",
                       hyperparameter="batch_size",
                       value_range=[16, 512],
                       default_value=32)
        updates.append(node_name="lr_scheduler",
                       hyperparameter="CosineAnnealingLR:T_max",
                       value_range=[50, 60],
                       default_value=55)
        updates.append(node_name='network_backbone',
                       hyperparameter='ResNetBackbone:dropout',
                       value_range=[0, 0.5],
                       default_value=0.2)
        return updates


    if __name__ == '__main__':

        ############################################################################
        # Data Loading
        # ============
        X, y = sklearn.datasets.fetch_openml(data_id=40981, return_X_y=True, as_frame=True)
        X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
            X,
            y,
            random_state=1,
        )

        ############################################################################
        # Build and fit a classifier with include components
        # ==================================================
        api = TabularClassificationTask(
            search_space_updates=get_search_space_updates(),
            include_components={'network_backbone': ['MLPBackbone', 'ResNetBackbone'],
                                'encoder': ['OneHotEncoder']}
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train.copy(),
            y_train=y_train.copy(),
            X_test=X_test.copy(),
            y_test=y_test.copy(),
            optimize_metric='accuracy',
            total_walltime_limit=300,
            func_eval_time_limit_secs=50
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred = api.predict(X_test)
        score = api.score(y_pred, y_test)
        print(score)
        print(api.show_models())

        ############################################################################
        # Build and fit a classifier with exclude components
        # ==================================================
        api = TabularClassificationTask(
            search_space_updates=get_search_space_updates(),
            exclude_components={'network_backbone': ['MLPBackbone'],
                                'encoder': ['OneHotEncoder']}
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train,
            y_train=y_train,
            X_test=X_test.copy(),
            y_test=y_test.copy(),
            optimize_metric='accuracy',
            total_walltime_limit=300,
            func_eval_time_limit_secs=50
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred = api.predict(X_test)
        score = api.score(y_pred, y_test)
        print(score)
        print(api.show_models())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 11 minutes  38.221 seconds)


.. _sphx_glr_download_examples_40_advanced_example_custom_configuration_space.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/Auto-PyTorch/refactor_development?urlpath=lab/tree/notebooks/examples/40_advanced/example_custom_configuration_space.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_custom_configuration_space.py <example_custom_configuration_space.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_custom_configuration_space.ipynb <example_custom_configuration_space.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
